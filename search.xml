<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cpp算法题之奇特的迷宫</title>
      <link href="/2024/03/16/cpp-suan-fa-ti-zhi-qi-te-de-mi-gong/"/>
      <url>/2024/03/16/cpp-suan-fa-ti-zhi-qi-te-de-mi-gong/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥算法题：奇特的迷宫"><a href="#蓝桥算法题：奇特的迷宫" class="headerlink" title="蓝桥算法题：奇特的迷宫"></a>蓝桥算法题：奇特的迷宫</h1><h2 id="编号：1994"><a href="#编号：1994" class="headerlink" title="编号：1994"></a>编号：1994</h2><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> g[<span class="number">2</span> * N][<span class="number">2</span> * N];</span><br><span class="line"><span class="type">int</span> d[<span class="number">2</span> * N][<span class="number">2</span> * N];</span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = {{<span class="number">2</span>, <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">2</span>}, {<span class="number">0</span>, <span class="number">-2</span>}, {<span class="number">-2</span>, <span class="number">0</span>}};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">//多组数据</span></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) {</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="string">'.'</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line"><span class="comment">//将地图存入二维数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="type">int</span> l = n - i + <span class="number">1</span>;</span><br><span class="line">        string str;</span><br><span class="line">        cin &gt;&gt; str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) {</span><br><span class="line">            g[i][l] = str[j];</span><br><span class="line">            l += <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//将地图存入二维数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= <span class="number">2</span> * n - <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="type">int</span> l = i - n + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> s = n - (i - n);</span><br><span class="line">        string str;</span><br><span class="line">        cin &gt;&gt; str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; s; j++) {</span><br><span class="line">            g[i][l] = str[j];</span><br><span class="line">            l += <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//将起点和终点下标计算出来</span></span><br><span class="line">    <span class="type">int</span> sx = <span class="number">0</span>, sy = <span class="number">0</span>, ex = <span class="number">0</span>, ey = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n - <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span> * n - <span class="number">1</span>; j++) {</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">'S'</span>) {</span><br><span class="line">                sx = i;</span><br><span class="line">                sy = j;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">'D'</span>) {</span><br><span class="line">                ex = i;</span><br><span class="line">                ey = j;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//优先队列 存放了x,y,d1   x,y是下标  d1是到达该点的步数</span></span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, vector&lt;pair&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt;, greater&lt;pair&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; &gt; pq;</span><br><span class="line">    <span class="comment">//初始化到达所有下标的距离为0x3f3f3f3f表示无穷大无法到达</span></span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    <span class="comment">//到起点的距离为0  因为开始就在起点</span></span><br><span class="line">    d[sx][sy] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//设置为1，因为从起点可以往上下左右走1步</span></span><br><span class="line">    g[sx][sy]=<span class="string">'1'</span>;</span><br><span class="line">    <span class="comment">//将起点加入到 队列中</span></span><br><span class="line">    pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="built_in">make_pair</span>(sx, sy)));</span><br><span class="line">    <span class="comment">//ans是记录到达终点的距离，初始无穷大，表示无法到达</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="comment">//BFS模板</span></span><br><span class="line">    <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) {</span><br><span class="line">        <span class="keyword">auto</span> cur = pq.<span class="built_in">top</span>();</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> x = cur.second.first, y = cur.second.second, d1 = cur.first;</span><br><span class="line">        <span class="comment">//如果当前是终点，记录答案直接退出</span></span><br><span class="line">        <span class="keyword">if</span> (x == ex &amp;&amp; y == ey) {</span><br><span class="line">            ans = d1;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//当前下标可以往上下左右走step步</span></span><br><span class="line">        <span class="type">int</span> step = (<span class="type">int</span>)(g[x][y] - <span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">            <span class="comment">//nx,ny表示新的下标</span></span><br><span class="line">            <span class="type">int</span> nx = x + dir[i][<span class="number">0</span>] * step;</span><br><span class="line">            <span class="type">int</span> ny = y + dir[i][<span class="number">1</span>] * step; </span><br><span class="line">            <span class="comment">//判断非法和边界情况的下标，不对就不执行下面代码</span></span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">1</span> || ny &lt; <span class="number">1</span> || nx &gt;= <span class="number">2</span> * n || ny &gt;= <span class="number">2</span> * n || g[nx][ny] == <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//如果到（nx ny 的步数) 大于 (x,y步数+1) ，表示可以把nx,ny步数更新的更小，同时把nx,ny加入到队列中</span></span><br><span class="line">            <span class="keyword">if</span> (d[nx][ny] &gt; d[x][y] + <span class="number">1</span>) {</span><br><span class="line">                d[nx][ny] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">                pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(d[nx][ny], <span class="built_in">make_pair</span>(nx, ny)));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//ans是记录到达终点的距离，初始无穷大，表示无法到达 ，如果到最后还是无法到达，输出0</span></span><br><span class="line">    <span class="keyword">if</span> (ans == <span class="number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/16/hello-world/"/>
      <url>/2024/03/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

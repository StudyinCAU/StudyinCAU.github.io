<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>666</title>
      <link href="/2024/03/17/666666/"/>
      <url>/2024/03/17/666666/</url>
      
        <content type="html"><![CDATA[<p>66666</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>合作测试</title>
      <link href="/2024/03/17/ce-shi-wen-jian/"/>
      <url>/2024/03/17/ce-shi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h1>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常系数线性齐次数列递推</title>
      <link href="/2024/03/17/shu-lie-di-tui/"/>
      <url>/2024/03/17/shu-lie-di-tui/</url>
      
        <content type="html"><![CDATA[<h1 id="第零篇-数列递推"><a href="#第零篇-数列递推" class="headerlink" title="第零篇 数列递推"></a>第零篇 数列递推</h1><h2 id="PartⅠ-一阶常系数线性齐次递推"><a href="#PartⅠ-一阶常系数线性齐次递推" class="headerlink" title="PartⅠ 一阶常系数线性齐次递推"></a>PartⅠ 一阶常系数线性齐次递推</h2><p>​    若数列$\{a_n\}$满足以下形式：<br>$$<br>a_{n+1}=pa_n+q\quad(p\neq0)<br>$$<br>​    其中$p、q$为给定的实数，数列首项为$a_1$。</p><p>​    称这个数列满足一阶常系数线性齐次递推的形式。</p><p>​    这种数列的通项公式很容易求，可以分成两种情况：</p><p>​    <code>1.</code> 若$p=1$，则$a_{n+1}=a_{n}+q$，此时数列为一个公差为$q$的等差数列，容易推得：<br>$$<br>a_n=a_1+(n-1)q<br>$$</p><p>​    <code>2.</code> 若$p\neq1$，则可以通过 <strong>待定系数法</strong> 来构造等比数列：假设存在一个系数$A$，使得$a_{n+1}=pa_n+q$可以写成$a_{n+1}-A=p(a_n-A)$的形式，这样做的目的是为了转换成一个等比数列的形式，之后就可以进行递推来求解数列通项。</p><p>​    将$a_{n+1}-A=p(a_n-A)$展开：$a_{n+1}=pa_n+(1-p)A$与$a_{n+1}=pa_n+q$对比，解出系数$A=\dfrac{q}{1-p}$。</p><p>​    所以$\left\{a_{n+1}-\dfrac{q}{1-p}\right\}$是首项为$a_1-\dfrac{q}{1-p}$，公比为$q$的等比数列，由等比数列递推公式(累乘)：<br>$$<br>a_n=\dfrac{a_n}{a_{n-1}}\times\dfrac{a_{n-1}}{a_{n-2}}\times\cdots\times\dfrac{a_2}{a_{1}}\times{a_1}<br>$$<br>​    可以推出：$a_n-\dfrac{q}{1-p}=\left(a_1-\dfrac{q}{1-p}\right)q^{n-1}$，进而求得：<br>$$<br>a_n=\left(a_1-\dfrac{q}{1-p}\right)p^{n-1}+\dfrac{q}{1-p}<br>$$</p><h2 id="PartⅡ-二阶常系数线性齐次递推"><a href="#PartⅡ-二阶常系数线性齐次递推" class="headerlink" title="PartⅡ 二阶常系数线性齐次递推"></a>PartⅡ 二阶常系数线性齐次递推</h2><p>​    若数列$\{x_n\}$满足以下形式：<br>$$<br>x_{n+1}=px_{n}+qx_{n-1}\quad(p、q\neq0)<br>$$<br>​    其中$p、q$为给定的实数，数列第一项和第二项分别为$x_1$和$x_2$。</p><p>​    称这个数列满足二阶常系数线性齐次递推的形式。</p><p>​    类比于一阶递推形式中构造等比数列的方法，我们还是尝试<strong>待定系数法</strong>构造这样的等比数列：</p><p>​    假设存在实数$a、b$，使得$x_{n+1}=px_{n}+qx_{n-1}$可以写成$x_{n+1}-ax_{n}=b(x_{n}-ax_{n-1})$，整理一下：$x_{n+1}=(a+b)x_{n}-abx_{n-1}$，对比系数有：<br>$$<br>\left\{<br>\begin{array}{2}<br>a+b=p \<br>ab=-q<br>\end{array}<br>\right.<br>$$<br>​    这个形式就非常像初中学过的一元二次方程，实数$a、b$是方程$x^2-px-q=0$的解。</p><p>​    <code>1.</code>方程解不相等$(a\neq b)$时：</p><p>​    所以$\{x_{n+1}-ax_n\}$是公比为$b$的等比数列，由累乘得到：$x_{n+1}-ax_n=(x_2-ax_1)b^{n-1}$</p><p>​    $x_{n+1}-ax_{n}=b(x_{n}-ax_{n-1})$还可以写成$x_{n+1}-bx_{n}=a(x_{n}-bx_{n-1})$的形式，因此$\{x_{n+1}-bx_n\}$是公比为$a$的等比数列，累乘得到：$x_{n+1}-bx_n=(x_2-bx_1)a^{n-1}$</p><p>​    将累乘得到的两个式子相减有：<br>$$<br>x_n=\dfrac{x_2-bx_1}{a-b}\cdot a^{n-1}+\dfrac{x_2-ax_1}{b-a}\cdot b^{n-1}<br>$$<br>​    为了便于记忆，我们令$\left\{\begin{array}{2} \alpha=\dfrac{x_2-bx_1}{a-b}\cdot\dfrac{1}{a}\\ \beta=\dfrac{x_2-ax_1}{b-a}\cdot\dfrac{1}{b}\end{array}\right.$，所以$x_n = \alpha \cdot a^{n}+\beta\cdot b^{n}$。</p><p>​    解题时只需要根据数列$\{x_n\}$的递推公式写出相应的特征方程，得到解$a、b$，再根据$x_1、x_2$待定系数求解出$\alpha、\beta$即可得到该数列通项公式。下面是一个例子：</p><p>​    $Fibonacci$数列是大家非常熟悉的一个数列，它满足这样的条件：$a_1=a_2=1$，$a_{n+1}=a_n+a_{n-1}$，求$Fibonacci$数列的通项公式。</p><p>​    由递推关系式：$a_{n+1}=a_n+a_{n-1}$得到特征方程：$x^2-x-1=0$。</p><p>​    这个方程的解为：$a=\dfrac{\sqrt5+1}{2}$，$b=\dfrac{-\sqrt5+1}{2}$</p><p>​    所以他的通项公式可以写成：$x_n = \alpha \cdot \left( \dfrac{\sqrt{5}+1}{2} \right)^{n-1} + \beta \cdot \left( \dfrac{-\sqrt{5}+1}{2} \right)^{n-1}$</p><p>​    代入$a_1=a_2=1$，解出$\alpha=\dfrac{1}{\sqrt5}$，$\beta=-\dfrac{1}{\sqrt5}$。</p><p>​    所以$Fibonacci$数列的通项为：$ x_n = \dfrac{1}{\sqrt{5}}\left[ \left( \dfrac{\sqrt{5}+1}{2} \right)^{n-1} - \left( \dfrac{-\sqrt{5}+1}{2} \right)^{n-1} \right]$</p><p>​    </p><p>​    <code>2.</code>方程解相等$(a=b)$时：</p><p>​    $x_{n+1}=px_{n}+qx_{n-1}$可以写成$x_{n+1}-bx_{n}=b(x_{n}-bx_{n-1})$，对$\{x_{n+1}-bx_n\}$​这个数列进行累乘得：<br>$$<br>x_{n+1}-bx_n=b^{n-1}(x_2-bx_1)<br>$$<br>​    两边同时除以$b^{n+1}$有：</p><p>​<br>$$<br>\dfrac{x_{n+1}}{b^{n+1}}-\dfrac{x_{n}}{b^{n}}=\dfrac{x_{2}}{b^2}-\dfrac{x_1}{b}<br>$$<br>​    这说明数列$\left\{\dfrac{x_{n}}{b^{n}}\right\}$是一个等差数列，公差为$\dfrac{x_{2}}{b^2}-\dfrac{x_1}{b}$。</p><p>​    由此可以求得：$\dfrac{x_{n}}{b^{n}}=(n-1)\left(\dfrac{x_{2}}{b^{2}}-\dfrac{x_{1}}{b}\right)+\dfrac{x_{1}}{b}$，</p><p>​    所以：$x_n=x_1 \cdot b^{n-1}+(x_2-bx_1)(n-1)\cdot b^{n-2}$，</p><p>​    整理一下，$x_n=\left[\left(\dfrac{x_{1}}{b}-\dfrac{x_{2}}{b^2}+\dfrac{1}{b}\right)+\left(\dfrac{-x_{1}}{b}+\dfrac{-x_{2}}{b^2}\right)n\right]b^n$。</p><p>​    同理我们可以令$\left\{\begin{array}{2} \alpha=\dfrac{x_{1}}{b}-\dfrac{x_{2}}{b^2}+\dfrac{1}{b}\\ \beta=\dfrac{-x_{1}}{b}+\dfrac{-x_{2}}{b^2}\end{array}\right.$，所以$x_n=(\alpha+\beta n)\cdot b^n$。</p><p>​    解题时只需要待定系数求出$\alpha、\beta$即可得到通项公式。</p><h2 id="PartⅢ-从递推到矩阵"><a href="#PartⅢ-从递推到矩阵" class="headerlink" title="PartⅢ 从递推到矩阵"></a>PartⅢ 从递推到矩阵</h2><p>​    上面都是低阶的问题，如果碰到更高阶的常系数线性齐次递推式子呢？由于是预备知识，在这里不详述，可以先看下面这一篇知乎上的文章↓：</p><p>​    <a href="https://zhuanlan.zhihu.com/p/33854447">二阶常系数齐次线性递推数列 - 知乎 (zhihu.com)</a></p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 大学数学预备知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论笔记</title>
      <link href="/2024/03/17/gai-lu-lun/"/>
      <url>/2024/03/17/gai-lu-lun/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="概率论.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 概率论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/17/hello-world/"/>
      <url>/2024/03/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cpp算法题之奇特的迷宫</title>
      <link href="/2024/03/16/cpp-suan-fa-ti-qi-te-de-mi-gong/"/>
      <url>/2024/03/16/cpp-suan-fa-ti-qi-te-de-mi-gong/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥算法题奇特的迷宫"><a class="markdownIt-Anchor" href="#蓝桥算法题奇特的迷宫"></a> 蓝桥算法题：奇特的迷宫</h1><p>题目来自蓝桥题库：<a href="https://www.lanqiao.cn/problems/1994/learning/?page=1&amp;first_category_id=1&amp;problem_id=1994">1.奇特的迷宫 - 蓝桥云课 (lanqiao.cn)</a></p><h2 id="编号1994"><a class="markdownIt-Anchor" href="#编号1994"></a> 编号：1994</h2><p><strong>题目：</strong></p><p>如以下图(a)所示的15行、15列的迷宫(相当于n=8)，迷宫中每个位置可能为S（表示起始位置）、D（表示目标位置）、1～9的数字，且S和D各只有1个。对于1～9的数字，表示从当前位置出发，可以沿上、下、左、右方向走的方格数（多一个、少一个方格都不行）；图(b)演示的是，数字2表示可以沿上、下、左、右方向走2个方格，到达的位置用星号（*）表示。从S出发，可以沿上、下、左、右方向走1个方格。现在要求从S到D的最少步数。</p><p><img src="/../images/lanqiao1994.jpg" alt=""></p><p><strong>输入描述：</strong></p><p>输入文件中包含多个测试数据。每个测试数据的第1行为一个整数n，2≤n≤10，表示迷宫的大小为2n-1行、2n-1列。接下来有2n-1行，为每行各位置上的数字（或者为S、D），第1行有1个字符，第2行有2个字符，…，第n行有n个字符，第n+1行有n-1个字符，…，第2n-1行有1个字符。输入文件中最后一行为0，表示测试数据结束。</p><p><strong>输出描述：</strong></p><p>对每个测试数据，如果能从S走到D，输出最少步数；否则（即从S走不到D），输出0。</p><p><strong>解答：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> g[<span class="number">2</span> * N][<span class="number">2</span> * N];</span><br><span class="line"><span class="type">int</span> d[<span class="number">2</span> * N][<span class="number">2</span> * N];</span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = {{<span class="number">2</span>, <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">2</span>}, {<span class="number">0</span>, <span class="number">-2</span>}, {<span class="number">-2</span>, <span class="number">0</span>}};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">//多组数据</span></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) {</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="string">'.'</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line">        <span class="comment">//将地图存入二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            <span class="type">int</span> l = n - i + <span class="number">1</span>;</span><br><span class="line">            string str;</span><br><span class="line">            cin &gt;&gt; str;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) {</span><br><span class="line">                g[i][l] = str[j];</span><br><span class="line">                l += <span class="number">2</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//将地图存入二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= <span class="number">2</span> * n - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="type">int</span> l = i - n + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> s = n - (i - n);</span><br><span class="line">            string str;</span><br><span class="line">            cin &gt;&gt; str;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; s; j++) {</span><br><span class="line">                g[i][l] = str[j];</span><br><span class="line">                l += <span class="number">2</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//将起点和终点下标计算出来</span></span><br><span class="line">        <span class="type">int</span> sx = <span class="number">0</span>, sy = <span class="number">0</span>, ex = <span class="number">0</span>, ey = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span> * n - <span class="number">1</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="string">'S'</span>) {</span><br><span class="line">                    sx = i;</span><br><span class="line">                    sy = j;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="string">'D'</span>) {</span><br><span class="line">                    ex = i;</span><br><span class="line">                    ey = j;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//优先队列 存放了x,y,d1   x,y是下标  d1是到达该点的步数</span></span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, vector&lt;pair&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt;, greater&lt;pair&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; &gt; pq;</span><br><span class="line">        <span class="comment">//初始化到达所有下标的距离为0x3f3f3f3f表示无穷大无法到达</span></span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">        <span class="comment">//到起点的距离为0  因为开始就在起点</span></span><br><span class="line">        d[sx][sy] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//设置为1，因为从起点可以往上下左右走1步</span></span><br><span class="line">        g[sx][sy]=<span class="string">'1'</span>;</span><br><span class="line">        <span class="comment">//将起点加入到 队列中</span></span><br><span class="line">        pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="built_in">make_pair</span>(sx, sy)));</span><br><span class="line">        <span class="comment">//ans是记录到达终点的距离，初始无穷大，表示无法到达</span></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//BFS模板</span></span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="keyword">auto</span> cur = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> x = cur.second.first, y = cur.second.second, d1 = cur.first;</span><br><span class="line">            <span class="comment">//如果当前是终点，记录答案直接退出</span></span><br><span class="line">            <span class="keyword">if</span> (x == ex &amp;&amp; y == ey) {</span><br><span class="line">                ans = d1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//当前下标可以往上下左右走step步</span></span><br><span class="line">            <span class="type">int</span> step = (<span class="type">int</span>)(g[x][y] - <span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">                <span class="comment">//nx,ny表示新的下标</span></span><br><span class="line">                <span class="type">int</span> nx = x + dir[i][<span class="number">0</span>] * step;</span><br><span class="line">                <span class="type">int</span> ny = y + dir[i][<span class="number">1</span>] * step; </span><br><span class="line">                <span class="comment">//判断非法和边界情况的下标，不对就不执行下面代码</span></span><br><span class="line">                <span class="keyword">if</span> (nx &lt; <span class="number">1</span> || ny &lt; <span class="number">1</span> || nx &gt;= <span class="number">2</span> * n || ny &gt;= <span class="number">2</span> * n || g[nx][ny] == <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//如果到（nx ny 的步数) 大于 (x,y步数+1) ，表示可以把nx,ny步数更新的更小，同时把nx,ny加入到队列中</span></span><br><span class="line">                <span class="keyword">if</span> (d[nx][ny] &gt; d[x][y] + <span class="number">1</span>) {</span><br><span class="line">                    d[nx][ny] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">                    pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(d[nx][ny], <span class="built_in">make_pair</span>(nx, ny)));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ans是记录到达终点的距离，初始无穷大，表示无法到达 ，如果到最后还是无法到达，输出0</span></span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
